Parameters:
  KnowledgeBaseID:
    Type: String
    Description: The Bedrock Knowledge base ID
    Default: ''
  LambdaLayerS3BucketName:
    Type: String
    Description: The S3 bucket stores lambda layer code
    Default: ''

Resources:
  LambdaExecutionRoleForKnowledgeBase:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: KnowledgeBaseExecutionPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:Retrieve'
                  - 'bedrock:RetrieveAndGenerate'
                Resource: '*'

  DeployKnowledgeBaseLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: KnowledgeBaseLambdaLayer
      Description: Knowledge Base Lambda Layer
      Content:
        S3Bucket: !Ref LambdaLayerS3BucketName
        S3Key: lambdalayer/knowledgebase_lambdalayer.zip
      CompatibleRuntimes:
        - python3.12
        - python3.11
        - python3.10

  DeployKnowledgeBaseLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InvokeKnowledgeBase
      Code:
        ZipFile: |
          import os
          import boto3
          import random
          import string

          boto3_session = boto3.session.Session()
          region = boto3_session.region_name

          # create a boto3 bedrock client
          bedrock_agent_runtime_client = boto3.client('bedrock-agent-runtime')

          # get knowledge base id from environment variable
          kb_id = os.environ.get("KNOWLEDGE_BASE_ID")
          #print (kb_id)

          # declare model id for calling RetrieveAndGenerate API
          model_id = "anthropic.claude-instant-v1"
          model_arn = f'arn:aws:bedrock:{region}::foundation-model/{model_id}'

          def retrieveAndGenerate(input, kbId, model_arn, sessionId):
              #print(input, kbId, model_arn, sessionId)
              if sessionId != "":
                  return bedrock_agent_runtime_client.retrieve_and_generate(
                      input={
                          'text': input
                      },
                      retrieveAndGenerateConfiguration={
                          'type': 'KNOWLEDGE_BASE',
                          'knowledgeBaseConfiguration': {
                              'knowledgeBaseId': kbId,
                              'modelArn': model_arn
                          }
                      },
                      sessionId=sessionId
                  )
              else:
                  return bedrock_agent_runtime_client.retrieve_and_generate(
                      input={
                          'text': input
                      },
                      retrieveAndGenerateConfiguration={
                          'type': 'KNOWLEDGE_BASE',
                          'knowledgeBaseConfiguration': {
                              'knowledgeBaseId': kbId,
                              'modelArn': model_arn
                          }
                      }
                  )

          def lambda_handler(event, context):
              query = event["question"]
              sessionId = event["sessionId"]
              response = retrieveAndGenerate(query, kb_id, model_arn, sessionId)
              all_citations = []
              for citation in response['citations']:
                  for ref in citation['retrievedReferences']:
                    all_citations.append(ref)

              generated_text = response['output']['text']
              sessionId = response['sessionId']
              print (generated_text)
              print (sessionId)
              
              return {
                  'statusCode': 200,
                  'body': {"question": query.strip(), "answer": generated_text.strip(), "sessionId":sessionId, "references": all_citations}
              }
              
      Description: Create KnowledgeBase Lambda
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRoleForKnowledgeBase.Arn
      Runtime: python3.12
      Timeout: 60
      Layers: 
        - !Ref DeployKnowledgeBaseLambdaLayer
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID: !Ref KnowledgeBaseID